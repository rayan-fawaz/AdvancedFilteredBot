def fetch_token_holders(token_mint):
    """Fetch the top holders for a token using Helius API."""
    PROGRAM_IDS = [
        "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",  # Token Program
        "11111111111111111111111111111111",  # System Program
        "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL",  # Associated Token Program
    ]

    payload = {
        "jsonrpc": "2.0",
        "id": 1,
        "method": "getTokenLargestAccounts",
        "params": [token_mint]
    }
    try:
        response = requests.post(HELIUS_RPC_URL, json=payload)
        response.raise_for_status()
        holders = response.json().get("result", {}).get("value", [])

        if not holders or len(holders) < 2:
            return None

        # First get total supply including bonding curve
        total_supply = sum(float(holder["amount"]) for holder in holders)

        if total_supply == 0:
            return None

        # Skip the first holder (bonding curve) and use the rest
        real_holders = holders[1:]

        # Calculate total number of holders (excluding bonding curve)
        total_holders = len(real_holders)

        # Calculate percentages using total supply with real holders
        top_10_percentage = sum(float(holder["amount"]) for holder in real_holders[:10]) / total_supply * 100
        top_20_percentage = sum(float(holder["amount"]) for holder in real_holders[:20]) / total_supply * 100
        top_5 = [float(holder["amount"]) / total_supply * 100 for holder in real_holders[:5]]

        return {
            "total_holders": total_holders,
            "top_5_percentages": top_5,
            "top_10_percentage": top_10_percentage,
            "top_20_percentage": top_20_percentage
        }
    except requests.exceptions.RequestException as e:
        logging.error(f"Error fetching holders: {e}")
        return None


def format_holders_message(holders_info):
    """Format holders information for the message."""
    top_5 = " | ".join(f"{percent:.2f}" for percent in holders_info["top_5_percentages"])
    return (
        f"ðŸ‘¥ <b>Holders:</b> {holders_info['total_holders']}\n"
        f"â”œâ”€ <b>TH 10:</b> {holders_info['top_10_percentage']:.2f}%\n"
        f"â”œâ”€ <b>TH 20:</b> {holders_info['top_20_percentage']:.2f}%\n"
        f"â””â”€ <b>TH:</b> {top_5}\n\n"
    )
